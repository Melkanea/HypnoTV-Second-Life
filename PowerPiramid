//===========================//
//  Melkaneas POWER PYRAMID  //
//===========================//

//Thanks to:
// Bouncing Prims
// Nexii Malthus' http://wiki.secondlife.com/wiki/Interpolation/Cosine/Float
// Generic Multi Notecard reader by Brangus Weir
// http://wiki.secondlife.com/wiki/LlGetNotecardLine

//========================OVERVIEW=========================================================================// 
//Center spehere rotates while 6 pyramids are floating around                                              //
//one piramid on each axis                                                                                 //
//pyramids are roating and bouncing                                                                        //
//objects changes color on control imput                                                                   //
//invert rotation on comand                                                                                //
//=====================================Glitches============================================================//
//very resourse intensive. convert to mesh                                                                 //
//on reseting script piraminds default positions becomes new position ruining bounce effect                //
//reads list lenght on each color change,                                                                  //
//=========================================================================================================//

//default Prim settings
vector color = <1.0, 1.0, 1.0>;
vector color1;
integer face = ALL_SIDES;
integer counter = -1 ;
//COMUNICATION
integer MyChannel = 667;

// Generic Multi Notecard reader
// Shortened by Melkanea to read only one card
list gOneCard;                     //the list the notecard gets stored in
string gsCardOneName = "COLORS";   //NOTECARD NAME
string g_sNoteCardName; 
list g_lTempLines;     
integer g_iLine;       
key g_kQuery;

initialize(string _action) 
{
    if (_action == "") 
        {
        loadNoteCard(gsCardOneName);
        } 
    else if (_action == "finish")
        {
        integer len = llGetListLength(gOneCard);
        } 
}
loadNoteCard(string _notecard ) 
{
    g_lTempLines = []; 
    g_sNoteCardName = _notecard;
    g_iLine = 0;
    g_kQuery = llGetNotecardLine(g_sNoteCardName, g_iLine); 
}
notecardFinished(string _notecard)
{
    if (_notecard == gsCardOneName)
    {
        gOneCard = g_lTempLines;
        initialize("finish");
    }    
}
//end of notecard reader


//Set color to string read from list feed by notecard
//lists start at 0, counter starts at 1 to avoid default color
//defines the current color based on counter
setColortoList(string color) 
{   
    color1 = (vector)llList2String(gOneCard, counter);
//    llOwnerSay((string)counter + " " + (string)color1); //testing purposes only remove on final version
    if (counter != 0)
        {
        integer lenght = llGetListLength(gOneCard); //How can i only check it once? [WHELP!]
            if (counter == lenght)
            {
                counter = 0;
            }
            if (counter == -lenght)
            {
                counter = 0;
            } 
        }
}
//Bouncing
list childOffsets = [<0.000000, 0.000000, -1.402121>,<0.000000, 1.402121, 0.000000>,<-1.402121, 0.000000, 0.000000>,<0.000000, -1.402121, 0.000000>,<0.000000, 0.000000, 1.402121>,<1.402121, 0.000000, 0.000000>];
integer bouncing;
integer expanding;
float travelPart = 1.0;

float interp(float t)
{   
    // with range from 0.475 to 1.5 [modified range or overlaps sphere ]
    float F = (1-llCos(t*PI))/2;
    return 0.35*(1-F)+1.0*F;
}
    
default
{
    state_entry()
    {   
//melkaneas
//test        llOwnerSay("Welcome to Melkaneas Color Changer");
        initialize("");  //Notecard reader Init 
        llListen(MyChannel,"","","");
        llSetPrimitiveParams( 
                [PRIM_GLOW, face, .001 ] ); 
                
//bouncing                
        integer childLink = llGetNumberOfPrims();
            
        while (1 < --childLink);
    }
    timer()
    {
        travelPart += llList2Float([-0.1, 0.1], expanding);
        if (travelPart > 1.0)
        {
            travelPart = 1.0;
            expanding = FALSE;
        }
        else
        if (travelPart < 0.0)
        {
            travelPart = 0.0;
            expanding = TRUE;
        }
        integer childLink = llGetNumberOfPrims();
        list paramList;
        do
            paramList += 
                [ PRIM_LINK_TARGET, childLink
                , PRIM_POS_LOCAL, llList2Vector(childOffsets, childLink-2) * interp(travelPart)
                ];
        while (1 < --childLink);
        llSetLinkPrimitiveParamsFast(LINK_THIS, paramList);        
    }
//bouncing end
    dataserver(key _query_id, string _data) //dataserver part of notecard reader
    {
        if (_query_id == g_kQuery) 
            {
            if (_data != EOF) 
                {    
                g_lTempLines += _data;
                ++g_iLine;
                g_kQuery = llGetNotecardLine(g_sNoteCardName, g_iLine);
                } 
            else 
                {
                notecardFinished(g_sNoteCardName);
                }
            }
    }
    listen(integer channel, string name, key id, string message)    
    {       
     if (message == "right")
        {  
//test        llSay(0,"Eeep!  Someone said "+message+" and scared me."); 
            ++counter;
            setColortoList("");
//test        llOwnerSay("buu!" + (string)color1);
            llSetColor(color1, face);
            llTargetOmega(<.4,.3,.2>,PI,1.0);
            llSetTimerEvent(llList2Float([0.0, 0.1], bouncing = !bouncing));
        }        
        if (message == "left")
        {  
//test        llSay(0,"Ooop!  Someone said "+message+" and did not scare me."); 
            --counter;  
            setColortoList(""); 
//test        llOwnerSay("buu!" + (string)color1);
            llSetColor(color1, face); 
            llTargetOmega(<.4,.3,.2>,-PI,1.0); 
            llSetTimerEvent(llList2Float([0.0, 0.1], bouncing = !bouncing));             
        }   
        if (message == "stop")
        {
          llTargetOmega(<.0,.0,.0>,-PI,1.0);;
          llSetTimerEvent(llList2Float([0.0, 0.1], !bouncing));
          llResetScript();
        }
    }
}
